import React from 'react';



export const post = { 
techpost: `

Contract
========

******************

이더리움 네트워크의 계약을 통해 저작권자와 분산된 불특정 다수의 모니터링 요원 사이의 정보 교환 및 보상 합의 프로토콜 구축
<br/><br/><br/>


Web server / Cache server
=========================

******************

이더리움 네트워크의 컨트렉트와 상호작용하는 웹 인터페이스<br/>
사용자의 사용성 증진을 위한 Cache server를 구축<br/>

웹 서버는 React, Nginx를 통해 구축<br/>
캐시 서버는 Mysql, Expressjs를 통해 구축
<br/><br/><br/>

Web crawler
===========

<b>/222.JPG</b>

1. 불법 저작물은 공간 지역성을 가지고 유통됨<br/>
-  유통하는 사이트, 블로그 등에서 집중적으로 유통<br/>
2. 특정 공간에서 유통되는 방식이 동일<br/>
- 각 인터넷 사업자, 사이트 별로 유통되는 형식이 유사<br/>

위의 특성을 활용하여 병렬 탐색 알고리즘을 구현
<br/><br/>

## 탐색

1. 신고로 획득한 키워드를 포함한 링크를 신고 url(Seed)로 부터 탐색한다.<br/>
2. 링크를 방문한다.<br/>
3. 신고로 획득한 웹 페이지와 방문한 페이지의 태그의 LCS 유사도를 통해 검사한다.<br/>
4. 검사한 페이지로부터 다시 키워드를 포함한 링크를 탐색한다.<br/>
5. 2단계, 3단계, 4단계를 원하는 탐색 깊이까지 반복한다.<br/>

<br/><br/>
## 탐색 위치 선정

1. 신고가 들어온 인터넷 사업자의 검색창, 목록을 탐색
2. 검색창에 현재까지 누적된 키워드를 통해 탐색
3. 인터넷 사업자에 해당되는 신고와 LCS 유사도 검사



******************

<br/><br/><br/>
`,

designpost:`

Component
===============

******************


Contract
--------

******************

이더리움 네트워크의 계약을 통해 저작권자와 분산된 불특정 다수의 모니터링 요원 사이의 정보 교환 및 보상 합의 프로토콜 구축
<br/><br/><br/>


Web server / Cache server
--------------------------

******************

이더리움 네트워크의 컨트렉트와 상호작용하는 웹 인터페이스<br/>
사용자의 사용성 증진을 위한 Cache server를 구축<br/>

웹 서버는 React, Nginx를 통해 구축<br/>
캐시 서버는 Mysql, Expressjs를 통해 구축
<br/><br/><br/>

Web crawler
-------------

<b>/222.JPG</b>

1. 불법 저작물은 공간 지역성을 가지고 유통됨<br/>
-  유통하는 사이트, 블로그 등에서 집중적으로 유통<br/>
2. 특정 공간에서 유통되는 방식이 동일<br/>
- 각 인터넷 사업자, 사이트 별로 유통되는 형식이 유사<br/>

위의 특성을 활용하여 병렬 탐색 알고리즘을 구현
<br/><br/>

## 탐색

1. 신고로 획득한 키워드를 포함한 링크를 신고 url(Seed)로 부터 탐색한다.<br/>
2. 링크를 방문한다.<br/>
3. 신고로 획득한 웹 페이지와 방문한 페이지의 태그의 LCS 유사도를 통해 검사한다.<br/>
4. 검사한 페이지로부터 다시 키워드를 포함한 링크를 탐색한다.<br/>
5. 2단계, 3단계, 4단계를 원하는 탐색 깊이까지 반복한다.<br/>

<br/><br/>
## 탐색 위치 선정

1. 신고가 들어온 인터넷 사업자의 검색창, 목록을 탐색
2. 검색창에 현재까지 누적된 키워드를 통해 탐색
3. 인터넷 사업자에 해당되는 신고와 LCS 유사도 검사


<br/><br/><br/>


Software architecture
=====================

******************

<a>/architecture.PNG</a>
<br/><br/><br/>

##웹 서버 및 캐시 서버

사용자 웹 서버는 React 프레임워크로 구현<br/>
캐시 서버는 RDBMS와 ExpressJs 프레임워크를 통해 블록체인의 이벤트와 블록의 정보를 미리 보관하고, 거래의 로직과 관련없는 사진, 메타데이터를 처리<br/>
일반 사용자는 웹 어플리케이션을 통해, 자신의 계좌의 상태를 확인<br/>
저작권자는 웹 어플리케이션을 통해 블록체인상에서 불법 유통 정보 제공에 대한 보상을 부여하는 거래를 생성<br/>
저작권자는 웹 어플리케이션을 통해 블록체인에 저작물의 등록, 저작권자의 등록을 거래로 수행<br/>
서버는 보상 내역을 확인해 캐시 서버의 데이터베이스를 블록체인과 동기화시키고, 신고를 노드 서버에게 전달할 수 있는 상태로 변경<br/>
(실제 서비스의 목표가 없는 관계로 현재는 노드 서버와 캐시서버가 분리되지 않고 동일한 데이터베이스를 사용합니다.)
<br/><br/>

## 노드(저작권자)

저작권자는 단순히 불특정 다수의 정보원을 고용하는 것이 아닌, 이 정보원들에게 구매한 불법 유통 경로를 통해 모니터링 시스템을 구축할 수 있음
<br/><br/>
Node 서버 프로세스는 중앙서버에서 보상한 신고의 정보를 획득할 수 있음<br/>
Node 서버 프로세스는 획득한 정보를 local database에 저장<br/>
Node의 Scheduler는 Web Crawler에게 수집한 정보에 대한 탐색을 수행시킴<br/>
현재는 캐시서버와 노드 서버는 분할되지 않음<br/>
<br/><br/>

## 웹 크롤러

불법 저작물은 공간 지역성을 가지고 유통됨<br/>
-  유통하는 사이트, 블로그 등에서 집중적으로 유통<br/>
특정 공간에서 유통되는 방식이 동일<br/>
- 각 인터넷 사업자, 사이트 별로 유통되는 형식이 유사<br/>

위의 특성을 활용하여 탐색 알고리즘을 구현

`,
policypost:`

Consensus
=========

******************

<br/><br/><br/>

신고의 거부 <br/>
----------------------------------------

******************

 허용되지 않은 신고는 다음과 같다.<br/>
① 해당 도메인이 이미 신고 되어 처리되거나, 신고된 경우 (In smart contract)<br/>
② 해당 저작물 보호 요청자가 특정 IP대역에서만 신고를 받고, 해당 IP대역이 아닌 경우(In smart contract)<br/>
③ 해당 도메인의 IP가 보호 요청자에 의해 거부되는 IP의 경우(In smart contract)<br/>
④ 해당 멀티미디어의 보호 요청이 없는 경우(In smart contract)<br/>
⑥ 해당 저작물 보호 요청자가 신고의 내용이 신뢰할 수 있는 웹 서비스 사업자(불법 유통 저작물을 삭제 조치하는 웹 서비스 사업자)인 경우에는 도메인 단위로 신고를 받고, 그 외에는 IP기준으로 신고를 받을 때, 이전 신고와 중복될 경우(In web service)<br/>
⑦ 프로젝트를 진행하며, 무의미한 신고를 사전에 처리하기 위해 백서에 고지된 내용 외의 여러 규칙이 적용될 수 있다.<br/>

 해당하는 허용되지 않은 신고는 어플리케이션에서 예외 처리되거나 스마트컨트렉트에서 예외 처리되어 수수료를 지불하지 않도록 한다.<br/>
 <br/><br/><br/>

검증단계의 거부<br/>
-------------------------------------------------

******************

 검증단계에서 다수결에 의해 유효하지 않다고 검증될 경우에는 다음과 같은 결과를 만든다.<br/>
 ① 거부 검증자의 수수료 보상<br/>
 ② 거부한 검증자의 평점 상승<br/>
 ③ 승인한 검증자의 평점 하락<br/>

 이 단계에서 검증자들은 저작권 보호 요청자가 제시하는 다양한 정보를 확인할 수 있어야 한다. 검증자는 침해 여부를 넘어 저작권 보호 요청자가 신고를 받지 않기를 원하는 사이트인지 확인, 제시하는 보호 범주, 해당 사이트의 언어 등을 검증한다.<br/>
 <br/><br/><br/>

판단단계의 거부<br/>
---------------------------------------------

******************

① 거부한 검증자 수수료 보상<br/>
② 거부한 검증자 평점 상승<br/>
③ 승인한 검증자 평점 하락<br/>
④ 등록된 저작물의 평점 하락<br/>
<br/><br/><br/>

판단단계의 승인<br/>
----------------------------------------------

******************

① 신고자 수수료 보상<br/>
② 승인한 검증자 수수료 보상<br/>
③ 승인한 검증자 평점 상승<br/>
④ 거부한 검증자 평점 하락<br/>
⑤ 저작물 평점 상승<br/>
⑥ 신고자, 검증자 토큰 보상<br/>
<br/><br/><br/>

검증단계에서 승인된 신고의 미처리가 m개 이상일 경우<br/>
---------------------------------------------------------

******************

 m개 이상인 상태에서 검증단계에서 승인되는 신고가 발생할 때마다 등록된 저작물의 평점을 낮춘다. 해당 평점이 일정이하로 낮아지게 되면 저작물의 등록을 취소한다.<br/>

 <br/><br/><br/>

보상 정책
-------------

******************

신고자는 보상의 50%를 갖고, 나머지는 검증자들에게 평점(rate)에 비례하여 나누어진다. 이 때, 신고자와 검증자의 보상의 비율은 프로젝트의 실제 사용에서 효용성을 따져 변경될 수 있다.<br/>

<br/><br/><br/>
<b>/flowchart.JPG</b>
<br/><br/><br/>

`,
developerpost:`

Developer
----------------

******************

<br /><br />
## 서왕규<br />
한양대학교 컴퓨터 소프트웨어 학과
<br /><br />

******************

## 김효일<br />
한양대학교 컴퓨터 소프트웨어 학과
`
}
